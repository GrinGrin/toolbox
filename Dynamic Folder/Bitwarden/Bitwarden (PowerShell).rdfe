{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Notes": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>\n\t\t</title>\n\t\t<style type=\"text/css\">\n\t\t\t.csA6E30F0A{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\n\t\t\t.cs704A893C{color:#000000;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;}\n\t\t\t.csE430D642{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:18pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs59084A0A{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}\n\t\t\t.cs9FDAA107{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs611E5658{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;}\n\t\t\t.cs9F02C483{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration: none;}\n\t\t\t.csFE1FD953{color:#0000FF;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration: underline;}\n\t\t\t.cs6614D131{color:#000000;background-color:#C0C0C0;font-family:'Courier New';font-size:12pt;font-weight:normal;font-style:normal;}\n\t\t\t.csF36562FF{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;}\n\t\t\t.csA114F500{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal}\n\t\t\t.cs7F838041{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:circle;color:#000000;background-color:transparent;font-family:'Courier New';font-size:12pt;font-weight:normal;font-style:normal}\n\t\t\t.csABC487F0{color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal;}\n\t\t\t.cs38C0FDD9{text-align:left;text-indent:-18pt;margin:0pt 0pt 0pt 36pt}\n\t\t\t.csFE10F85A{color:#C00000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;text-decoration: underline;}\n\t\t\t.csA55F28E3{color:#000000;background-color:transparent;font-family:'Courier New';font-size:12pt;font-weight:normal;font-style:normal;}\n\t\t\t.csC71B69B2{color:#E36C09;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;text-decoration: underline;}\n\t\t\t.csAC0824C2{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:circle;color:#C00000;background-color:transparent;font-family:'Courier New';font-size:12pt;font-weight:bold;font-style:normal}\n\t\t\t.cs97AD5C9C{color:#C00000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:bold;font-style:normal;}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h2 class=\"csA6E30F0A\">\n\t\t\t<span class=\"cs704A893C\">&nbsp;</span><span class=\"csE430D642\">Bitwarden Dynamic Folder sample with Powershell</span></h2>\n\t\t<p class=\"cs59084A0A\"><span class=\"cs9FDAA107\">Version</span><span class=\"cs611E5658\">: 2.0.0<br/></span><span class=\"cs9FDAA107\">Author</span><span class=\"cs611E5658\">: Nicolas Grimler</span></p><p class=\"cs59084A0A\"><span class=\"cs611E5658\">This Dynamic Folder sample allows you to load credentials from Bitwarden. The Bitwarden CLI utility is required and the full executable path where it is located must be configured in the &quot;Custom Properties&quot; section. Also, your Bitwarden login details must be provided in the dynamic folder&#39;s &quot;Credentials&quot; section.</span></p><p class=\"cs59084A0A\"><span class=\"cs611E5658\">It use the Bitwarden Vault Management API with an API ClientID/ClientSecret to login and also the master password to unlock the vault. Please read <a class=\"cs9F02C483\" href=\"https://bitwarden.com/help/personal-api-key/\"><span class=\"csFE1FD953\">https://bitwarden.com/help/personal-api-key/</span></a></span><span class=\"cs611E5658\"> to know how to get your personal API Key.<br/>If you don&#39;t want to use an API Key, please ensure that you are already manually logged in using the </span><span class=\"cs6614D131\">bw.exe</span><span class=\"cs611E5658\"> CLI utility as the script will not handle the TOTP 2FA handshake at the moment.</span></p><p class=\"cs59084A0A\"><span class=\"cs611E5658\">At the moment, only credentials and secure notes are collected. The flat folder structure from Bitwarden vault (folder, folder/subfolder) is split into a treeview for better navigation.</span></p><h3 class=\"csA6E30F0A\">\n\t\t\t<span class=\"csF36562FF\">Requirements</span></h3>\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t<li class=\"csA114F500\"><span class=\"cs611E5658\"><a class=\"cs9F02C483\" href=\"https://help.bitwarden.com/article/cli\"><span class=\"csFE1FD953\">Bitwarden command-line tool (CLI)</span></a></span></li><li class=\"csA114F500\"><span class=\"cs611E5658\">PowerShell, either:</span><ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t\t<li class=\"cs7F838041\"><span class=\"cs611E5658\">Legacy PowerShell (version 5.1 as standard Windows installation)</span></li><li class=\"cs7F838041\"><span class=\"cs611E5658\">PowerShell Core (6.x and later) available in <a class=\"cs9F02C483\" href=\"https://apps.microsoft.com/store/detail/powershell/9MZ1SNWT0N5D?hl=en-us&amp;gl=us\"><span class=\"csFE1FD953\">Microsoft Store</span></a></span><span class=\"cs611E5658\"> or <a class=\"cs9F02C483\" href=\"https://github.com/PowerShell/PowerShell\"><span class=\"csFE1FD953\">GitHub</span></a></span></li></ul>\n\t\t\t</li></ul>\n\t\t<p class=\"csA6E30F0A\"><span class=\"csABC487F0\">&nbsp;</span></p><h3 class=\"csA6E30F0A\">\n\t\t\t<span class=\"csF36562FF\">Setup</span></h3>\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t<li class=\"csA114F500\"><span class=\"cs611E5658\">On the credendials page of the dynamic folder, specify you Bitwarden account login and master password as used to access your vault (can be a credential object or directly configured)</span></li><li class=\"csA114F500\"><span class=\"cs611E5658\">Specify the full, absolute path to the Bitwarden CLI tool in the &quot;Custom Properties&quot; section.</span></li><li class=\"csA114F500\"><span class=\"cs611E5658\">Specify an available custom port on you computer for the webservice to listen on. Default port is 8087.</span></li><li class=\"csA114F500\"><span class=\"cs611E5658\">Specify your server URL if on-premise instance, or offical Bitwarden URL.</span></li><li class=\"csA114F500\"><span class=\"cs611E5658\">Specify your ClientID &amp; ClientSecret for the API</span><span class=\"csABC487F0\">.</span></li></ul>\n\t\t<p class=\"cs38C0FDD9\"><span class=\"cs611E5658\">&nbsp;</span></p><p class=\"csA6E30F0A\"><span class=\"csFE10F85A\">Important notes:</span></p><ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t<li class=\"csA114F500\"><span class=\"cs611E5658\">Bitwarden CLI utility versions: some updates to the utility can have issue with previous version&#39;s configuration. If you have issues authenticating, delete the data.json file under the &quot;Bitwarden CLI&quot; folder in you profile (%APPDATA%\\Roaming on Windows) and retry. The configuration is automatically set by the script.</span><ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t\t<li class=\"cs7F838041\"><span class=\"cs611E5658\">Some recent updates seems to prevent unlocking the vault if logged with an API Key (when used with a second factor configured on the account) in CLI mode. The REST mode using the </span><span class=\"csA55F28E3\">/unlock</span><span class=\"cs611E5658\"> endpoint does not seems impacted.</span></li></ul>\n\t\t\t</li><li class=\"csA114F500\"><span class=\"cs611E5658\">In the configuration of the interpreter used to run the script, </span><span class=\"cs9FDAA107\">check</span><span class=\"cs611E5658\"> the box &quot;Do not load the PowerShell profile&quot; as it may otherwise output unwanted messages invalidating the JSON output and causing errors.</span></li></ul>\n\t\t<p class=\"csA6E30F0A\"><span class=\"cs611E5658\">&nbsp;</span></p><p class=\"csA6E30F0A\"><span class=\"csC71B69B2\">Troubleshooting:</span></p><p class=\"csA6E30F0A\"><span class=\"cs611E5658\">You can use the script directly on your computer:</span></p><ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t<li class=\"csA114F500\"><span class=\"cs611E5658\">Copy the content of the &quot;Dynamic Folder Script&quot; section into a file with </span><span class=\"cs6614D131\">.ps1</span><span class=\"cs611E5658\"> extention</span></li><li class=\"csA114F500\"><span class=\"cs611E5658\">Adapt the first part by replacing </span><span class=\"cs6614D131\">&#39;$CustomProperties.*$&#39;</span><span class=\"cs611E5658\">, </span><span class=\"cs6614D131\">&#39;$EffectiveUsername$&#39;</span><span class=\"cs611E5658\"> and </span><span class=\"cs6614D131\">&#39;$EffectivePassword$&#39;</span><span class=\"cs611E5658\"> with corresponding values. Be cautious to keep values enclosed with single quotes (</span><span class=\"cs6614D131\">&#39;</span><span class=\"cs611E5658\">) to prevent variable expansion triggered by </span><span class=\"cs6614D131\">$</span><span class=\"cs611E5658\"> character.</span><ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t\t<li class=\"cs7F838041\"><span class=\"cs611E5658\">If your password contain single quotes, you may need to escape them using backtick (</span><span class=\"cs6614D131\">`</span><span class=\"cs611E5658\">)</span></li><li class=\"csAC0824C2\"><span class=\"cs97AD5C9C\">Be careful that the file will contain you vault&#39;s master password in clear text !</span></li></ul>\n\t\t\t</li><li class=\"csA114F500\"><span class=\"cs611E5658\">At the bottom of the script, you can uncomment the lines that write the result into a file and comment out the other ones. This may be easier to inspect the result than the dump directly on the terminal.</span><ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t\t<li class=\"csAC0824C2\"><span class=\"cs97AD5C9C\">Be careful that the file written by the script will contain your entire vault with passwords and secure notes in clear text !</span></li></ul>\n\t\t\t</li></ul>\n\t</body>\n</html>\n",
      "Script": "# Env config\n$global:OutputEncoding = New-Object Text.Utf8Encoding -ArgumentList (,$false) # BOM-less\n[Console]::OutputEncoding = $global:OutputEncoding\n\n# Bitwarden access config\n$Bitwarden = ( New-Object PSObject |\n  Add-Member -PassThru NoteProperty exec_path '$CustomProperty.BitWardenCLIExecutable$' |\n  Add-Member -PassThru NoteProperty wsport '$CustomProperty.BitWardenWSCustomPort$' |\n  Add-Member -PassThru NoteProperty serverUrl '$CustomProperty.BitWardenServerURL$' |\n  Add-Member -PassThru NoteProperty clientId '$CustomProperty.APIClientID$' |\n  Add-Member -PassThru NoteProperty clientSecret '$CustomProperty.APIClientSecret$' |\n  Add-Member -PassThru NoteProperty username '$EffectiveUsername$' |\n  Add-Member -PassThru NoteProperty password '$EffectivePassword$' |\n  Add-Member -PassThru NoteProperty session '' )\n\n$global:bwProcess = $null\n\n# Check bw.exe path validity\nif (!(Test-Path -Path \"$($Bitwarden.exec_path)\" -PathType Leaf)) {\n  Write-Error -Message \"Bitwarden CLI utility not found at specified path. Please check CLI utility path in Custom Properties.\" -ErrorAction Stop\n}\n\nfunction Get-VaultItems {\n  [CmdletBinding()]\n  param (\n    [Parameter(Mandatory=$false)]\n    [string]$folderId = \"\",\n    [Parameter(Mandatory=$false)]\n    [string]$collectionId = \"\"\n  )\n\n  if ($folderId -eq \"\" -and $collectionId -eq \"\") { Write-Error -Message \"Folder ID or Collection ID needed, none provided.\" -ErrorAction Stop }\n\n  if ($folderId -ne \"\" -and $collectionId -eq \"\") {\n    Write-Debug -Message \"Get VaultItems list in folder $($folderId)\"\n    if ($folderId -eq \"null\") {\n      # Trick to prevent also fetching all items in collections without a folder !\n      # There is no way to get only items without folder and only in personal vault\n      $tmpItems = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/items?collectionId=$($folderId)\").data.data | Where-Object { $null -eq $_.folderId }\n    } else {\n      $tmpItems = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/items?folderid=$($folderId)\").data.data\n    }\n  } elseif ($folderId -eq \"\" -and $collectionId -ne \"\") {\n    Write-Debug -Message \"Get VaultItems list in collection $($collectionId)\"\n    $tmpItems = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/items?collectionid=$($collectionId)\").data.data\n  } else {\n    Write-Error -Message \"Either FolderId or CollectionId are needed, not both.\" -ErrorAction Stop\n  }\n  $items = [array]@()\n  foreach ($item in $tmpItems) {\n    # Skip shared items with an organization to prevent duplicates\n    if ($folderid -ne \"\" -and $null -ne $item.organizationid) { continue }\n\n    # Parse item of type Login/Secure Note only\n    switch ($item.type) {\n      \"1\" { # Login\n        Write-Debug \"Get VaultItem Login $($item.name)\"\n        $row = \"\" | Select-Object Type,ID,Name,Notes,Favorite,Username,Password,URL\n        $row.Type = \"Credential\"\n        $row.ID = $item.id\n        $row.Name = $item.name\n        if ($null -ne $item.notes) {\n          $row.Notes = $item.notes.Replace(\"`r`n\", \"<br />\").Replace(\"`r\", \"<br />\").Replace(\"`n\", \"<br />\")\n        }\n        if ($item.favorite -eq \"true\") { $row.Favorite = $true } else { $row.Favorite = $false }\n        $row.Username = $item.login.username\n        $row.Password = $item.login.password\n        if ($item.login.uris.Count -gt 0) {\n          $row.URL = $item.login.uris[0].uri\n        }\n        if ($item.fields.count -gt 0) {\n          $itemFields = [array]@()\n          $fieldIndex = 0\n          foreach ($field in $item.fields) {\n            $frow = \"\" | Select-Object Type,Name,Value\n            switch ($field.type) {\n              \"0\" { $frow.Type = \"Text\" }\n              \"1\" { $frow.Type = \"Protected\" }\n              \"2\" { $frow.Type = \"YesNo\" }\n            }\n            if ($null -eq $frow.Type) {\n              return\n            }\n            if ($null -eq $field.name) {\n              $frow.Name = \"UnnamedField$($fieldIndex)\"\n              $fieldIndex++\n            } else {\n              $frow.Name = $field.name\n            }\n            $frow.Value = $field.value\n            $itemFields += $frow\n          }\n          $row = $row | Add-Member -PassThru NoteProperty CustomProperties @($itemFields)\n        }\n        $items += $row\n        $row = $null\n        $itemFields = $null\n        break\n      }\n      \"2\" { # Secure Note\n        Write-Debug \"Get VaultItem Note $($item.name)\"\n        $row = \"\" | Select-Object Type,ID,Name,Notes,TemplateID\n        $row.Type = \"Information\"\n        $row.ID = $item.id\n        $row.Name = $item.name\n        if ($null -ne $item.notes) {\n          $row.Notes = $item.notes.Replace(\"`r`n\", \"<br />\").Replace(\"`r\", \"<br />\").Replace(\"`n\", \"<br />\")\n        }\n        $row.TemplateID = \"Custom\"\n        if ($item.fields.count -gt 0) {\n          $itemFields = [array]@()\n          $fieldIndex = 0\n          foreach ($field in $item.fields) {\n            $frow = \"\" | Select-Object Type,Name,Value\n            switch ($field.type) {\n              \"0\" { $frow.Type = \"Text\" }\n              \"1\" { $frow.Type = \"Protected\" }\n              \"2\" { $frow.Type = \"YesNo\" }\n            }\n            if ($null -eq $frow.Type) {\n              return\n            }\n            if ($null -eq $field.name) {\n              $frow.Name = \"UnnamedField$($fieldIndex)\"\n              $fieldIndex++\n            } else {\n              $frow.Name = $field.name\n            }\n            $frow.Value = $field.value\n            $itemFields += $frow\n          }\n        } else {\n          $itemFields += @{ Type = \"Header\"; Name = \"See notes for details\"; Value = \"\"; }\n        }\n        $row = $row | Add-Member -PassThru NoteProperty CustomProperties $itemFields\n        $items += $row\n        $row = $null\n        $itemFields = $null\n        break\n      }\n    }\n  }\n  $row = $itemFields = $tmpItems = $null\n  return $items\n}\n\nfunction Get-ItemContent {\n  [CmdletBinding()]\n  param (\n    [Parameter(Mandatory=$false)]\n    [System.Object]$item = \"\"\n  )\n\n  # Reset vars\n  $allFolders = $null\n\n  if ($item -eq \"\") { Write-Error -Message \"Object of type Folder or Organization needed, none provided.\" -ErrorAction Stop }\n\n  switch ($item.object) {\n    \"folder\" {\n      # Get and parse Personal Vault folders\n      Write-Debug -Message \"ItemContent list folders $($item.name)\"\n      $local:allFolders = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/folders\" -Method Get).data.data | Sort-Object -Property name\n    }\n    \"collection\" {\n      # Get and parse Organization's Collections\n      Write-Debug -Message \"ItemContent list collections\"\n      $local:allFolders = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/org-collections/$($item.organizationId)\").data.data | Sort-Object -Property name\n    }\n  }\n  \n  # Init an empty array for the folder items/subfolder(s)\n  $local:children = [array]@()\n  \n  if ($null -ne ($local:allFolders | Where-Object { $_.Name -match \"$($item.name)/\" })) {\n    # Check if there is subfolder(s)\n    Write-Debug \"ItemContent $($item.name) has subfolders\"\n    # Get subfolder(s) content\n    foreach ($tmpSubFolder in ($local:allFolders | Where-Object { $_.Name -match \"$($item.name)/\" })) {\n      if ($global:alreadyParsedFolders.Contains($tmpSubFolder.name)) { continue }\n      # Prepare a subfolder record\n      $tmpFolder = @{ Type = \"Folder\"; ID = $tmpSubFolder.id; Name = $tmpSubFolder.name.Replace(\"$($item.name)/\", \"\"); Objects = [array]@(); }\n      $global:alreadyParsedFolders += $tmpSubFolder.name\n      # Recurse in the subfolder\n      $tmpChildren = [array]@(Get-ItemContent -item $tmpSubFolder)\n      if ($null -ne $tmpChildren[0]) {\n        # The subfolder returned content, add it to the folder entry\n        $tmpFolder.Objects = $tmpChildren\n        $local:children += $tmpFolder\n        $tmpChildren = $null\n        $tmpFolder = $null\n      }\n    }\n  }\n  \n  # Get items in the folder itself, if any\n  switch ($item.object) {\n    \"folder\" {\n      $local:children += [array]@(Get-VaultItems -folderId $item.id)\n    }\n    \"collection\" {\n      $local:children += [array]@(Get-VaultItems -collectionId $item.id)\n    }\n  }\n\n  if ($local:children.Count -gt 0) {\n    # If the children array is not empty, return the result\n    return $local:children\n  } else {\n    # Return a null value if there is no items and subfolders\n    return $null\n  }\n}\n\n#############\n## STARTUP ##\n#############\n# Get Vault status\n$status = (Invoke-Command -ScriptBloc { & \"$($Bitwarden.exec_path)\" status }) | ConvertFrom-Json\n\nif ($null -ne $status) {\n  if ($status.status -eq \"unauthenticated\") {\n    # Vault not configured, configure server\n    if ($null -eq $status.serverUrl -or $status.serverUrl -ne $Bitwarden.serverUrl) {\n      [void](Invoke-Command -ScriptBlock { & \"$($Bitwarden.exec_path)\" config server \"$($Bitwarden.serverUrl)\" })\n    }\n\n    # Prepare Vault login using API key\n    $env:BW_CLIENTID = $Bitwarden.clientId\n    $env:BW_CLIENTSECRET = $Bitwarden.clientSecret\n    [void](Invoke-Command -ScriptBlock { & \"$($Bitwarden.exec_path)\" login --apikey})\n\n    # Clear env variables\n    Remove-Item -Path Env:\\BW_*\n  }\n\n  # Launch RESTServer & unlock\n  $global:bwProcess = Start-process $Bitwarden.exec_path -ArgumentList \"serve --port $($Bitwarden.wsport)\" -PassThru -NoNewWindow\n  \n  $status = Invoke-WebRequest -Uri \"http://localhost:$($Bitwarden.wsport)/unlock\" -Method Post -Body @{ \"password\" = $Bitwarden.password }\n  if ($status.StatusCode -ne 200) {\n    Stop-process -Id $global:bwProcess.Id\n    Write-Error -Message \"Unable to authenticate and unlock your vault. Please check your API credentials and master password in Custom Properties.\" -ErrorAction Stop\n  } else {\n    $status = $status.Content | ConvertFrom-Json\n  }\n} else {\n  Write-Error -Message \"Unable to get Vault status, check CLI utility, Server URL or your connectivity.\" -ErrorAction Stop\n}\n\n# Keep track of already parsed subfolders\n$alreadyParsedFolders = $alreadyParsedCredentials = \"\"\n\n# Structures\n$final = @{ Objects = @(@{ Type = \"Folder\"; ID = \"personal\"; Name = \"Personal Vault\"; IconName = \"Flat/Objects/User Record\"; Objects = [array]@(); }); }\n\n# Sync Vault to latest version from server\n$res = Invoke-WebRequest -Uri \"http://localhost:$($Bitwarden.wsport)/sync\" -Method Post\nif ($res.StatusCode -ne 200) {\n  Stop-process -Id $global:bwProcess.Id\n  Write-Error -Message \"Unable to synchronize your vault. Please check your connectivity.\" -ErrorAction Stop\n}\n\n# Get and parse Personal Vault folders\n$allFolders = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/folders\" -Method Get).data.data | Sort-Object -Property Name\n\n# Parse top level folders\nforeach ($topLevelFolder in ($allFolders | Where-Object { $_.Name -notmatch \"/\" -and $_.Name -ne \"No Folder\"})) {\n  Write-Debug \"Folder $($topLevelFolder.name)\"\n  $row = \"\" | Select-Object Type,ID,Name,Objects\n  $row.\"Type\" = \"Folder\"\n  $row.ID = $topLevelFolder.id\n  $row.Name = $topLevelFolder.name\n  $row.Objects = [array]@()\n\n  # Get children for the top level folder (subfolders and items)\n  $tmpChildren = Get-ItemContent -item $topLevelFolder\n\n  if ($null -ne $tmpChildren) {\n    # Something returned, add objects to folder and to final array\n    $row.Objects += $tmpChildren\n    $final.Objects[0].Objects += $row\n    $row = $null\n  }\n}\n\n# Parse items not in a folder\n$tmpNoFolder = @{ Type = \"Folder\"; ID = \"nofolder\"; Name = \"No folder\"; Objects = [array]@(Get-VaultItems -folderId null); }\nif ($tmpNoFolder.Objects.Count -ne 0) { $final.Objects[0].Objects += $tmpNoFolder; $tmpNoFolder = $null }\n\n# Get and parse Organisations and Collections\n$organizations = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/organizations\").data.data | Sort-Object -Property name\n\nforeach ($org in $organizations) {\n  # Get collections for the organization\n  $collections = (Invoke-RestMethod -Uri \"http://localhost:$($Bitwarden.wsport)/list/object/org-collections?organizationId=$($org.id)\").data.data | Sort-Object -Property name\n  $tOrgCollections = [array]@()\n  foreach ($coll in $collections) {\n    $tF = @{ Type = \"Folder\"; ID = $coll.id; Name = $coll.name; IconName = \"Flat/Software/Tree\"; Objects = [array]@(Get-VaultItems -collectionId $coll.id); }\n    if ($tF.Objects.Count -ne 0) { $tOrgCollections += $tF; $tF = $null }\n  }\n  if ($tOrgCollections.Count -gt 0) {\n    # Create organization folder\n    $final.Objects += @{ Type = \"Folder\"; ID = $org.id; Name = $org.name; IconName = \"Flat/Money/Bank\"; Objects = $tOrgCollections; }\n  }\n}\n\n##############\n## SHUTDOWN ##\n##############\n# Terminating RESTServer\nStop-process -id $global:bwProcess.Id\n\n# Adapt JSON output for PowerShell version\nif ($PSVersionTable.PSVersion -ge '6.2') {\n  #ConvertTo-Json -InputObject $final -Depth 100 -EscapeHandling EscapeHtml |Out-file \".\\bitwarden_output.json\" -Force\n  ConvertTo-Json -InputObject $final -Depth 100 -EscapeHandling EscapeHtml\n} else {\n  #ConvertTo-Json -InputObject $final -Depth 100 |Out-file \".\\bitwarden_output.json\" -Force\n  ConvertTo-Json -InputObject $final -Depth 100\n}",
      "Type": "DynamicFolder",
      "Name": "Bitwarden (PowerShell)",
      "Description": "This Dynamic Folder sample allows you to import credentials from Bitwarden using Powershell.",
      "CustomProperties": [
        {
          "Name": "Bitwarden CLI Path & WebService port configuration",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "BitWarden CLI Executable",
          "Type": "Text",
          "Value": "<full_absolute_path_to>bw.exe"
        },
        {
          "Name": "BitWarden WS Custom Port",
          "Type": "Text",
          "Value": "8087"
        },
        {
          "Name": "Bitwarden instance URL",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "BitWarden Server URL",
          "Type": "URL",
          "Value": "https://vault.bitwarden.com"
        },
        {
          "Name": "Personal API Key",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "API Client ID",
          "Type": "Text",
          "Value": "user.<YOUR_CLIENT_ID>"
        },
        {
          "Name": "API Client Secret",
          "Type": "Protected",
          "Value": "<YOUR_CLIENT_SECRET>"
        }
      ],
      "ScriptInterpreter": "powershell",
      "DynamicCredentialScriptInterpreter": "json"
    }
  ]
}